@page "/products"

@using Microsoft.AspNetCore.SignalR.Client

@inject ProductApiService Api
@inject NavigationManager NavigationManager
@inject HubConnection connection

<h3>ProductList</h3>

@if (products == null)
{
    <LoadingComponent Message="Loading products" />
}
else
{
    @*  <form>
        <div>
            <label for="filter">Search: </label>
            <input type="text" id="filter" @bind-value="filter" />
        </div>

        <button type="button" @onclick="Search">Search</button>
    </form>*@

    <SearchBarComponent OnSearch="Search" />

    <TableTemplate Items="@products" Context="product">
        <HeaderTemplate>
            <th>Name</th>
            <th>Description</th>
            <th>Color</th>
            <th>Price</th>
            <th>Size</th>
            <th>Actions</th>
        </HeaderTemplate>

        <RowTemplate>
            <td>@product.Name</td>
            <td>@product.Description</td>
            <td>@product.Color</td>
            <td>@product.Price</td>
            <td>@product.Size</td>
            <td>
                <button @onclick="()=>Edit(product.Id)"><span class="oi oi-pencil" /></button>
            </td>
        </RowTemplate>

    </TableTemplate>


    <div>
        <nav>
            <ul>
                @foreach (var link in links)
                {
                    <li @onclick="()=>SelectedPage(link.Page)">
                        <span href="#">@link.Text</span>
                    </li>
                }
            </ul>
        </nav>

    </div>

}

@code {
    private ICollection<Product> products;

    private ICollection<PagingLink> links = Enumerable.Empty<PagingLink>().ToList();

    // private string filter;

    private int pageSize = 10;


    protected override async Task OnInitializedAsync()
    {
        // products = await Api.GetProductsAsync();

        var response = await Api.GetProductsAsync(new PagingParameters { PageNumber = 1, PageSize = pageSize });

        products = response.Items.ToList();

        CreatePaginationLinks(response.TotalCount / pageSize);

        connection.On<Product>("AddedProduct", product =>
        {
            Console.WriteLine($"Added product {product.Name}");

            products.Add(product);

            StateHasChanged();
        });

        await connection.StartAsync();

       

    }

    private void CreatePaginationLinks(int totalPages)
    {
        for (int i = 1; i <= totalPages; i++)
        {
            links.Add(new PagingLink { Page = i, Text = i.ToString() });
        }
    }

    private async Task SelectedPage(int page)
    {
        var response = await Api.GetProductsAsync(new PagingParameters { PageNumber = page, PageSize = pageSize });

        products = response.Items.ToList();
    }

    private async Task Search(string content)
    {
        products = (await Api.GetProductsByContentAsync(content)).ToList();
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"/products/edit/{id}");
    }

}
